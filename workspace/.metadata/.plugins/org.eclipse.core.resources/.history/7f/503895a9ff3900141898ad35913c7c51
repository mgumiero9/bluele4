package com.example.driver;

import java.util.LinkedList;
import java.util.UUID;

import android.bluetooth.BluetoothGatt;
import android.bluetooth.BluetoothGattCharacteristic;
import android.bluetooth.BluetoothGattDescriptor;
import android.content.Intent;
import android.util.Log;

public class BtDevice {
	public BluetoothGatt gatt = null;
	public String address = null;
	public int state = 0;
	public boolean enable = false;
	private int retries = 0;
	public LinkedList<ProcessIO> operations = new LinkedList<ProcessIO>();
	private ProcessIO lastOperation;
	public boolean updating = false;
	public ReadWriteTimeoutCallback reply;
	public Intent intentRead = new Intent(MainDriver.ACTION_UPDATED);
	

	public enum OPERATION { READ, READ_FINISH, WRITE, SET_NOT, SET_IND};
	public class ProcessIO {
		public ProcessIO( BluetoothGattCharacteristic characteristic,
				BluetoothGattDescriptor descriptor, OPERATION operation) {
			this.characteristic = characteristic;
			this.descriptor = descriptor;
			this.operation = operation;
		}
		public BluetoothGattCharacteristic characteristic;
		public BluetoothGattDescriptor descriptor;
		public OPERATION operation;
	};

	public Runnable ReadWriteTimeout = new Runnable() {
		@Override
		public void run() {
			Log.d("BT DEVICE", "Read/Write Operation Timeout on address " + gatt.getDevice().getAddress() + ". Trying " + retries);
			retries++;
			// Reinsert the operation
			
			if (retries < 9) {
				if (execLastOperation())
					reply.callbackTimeout();
				else
					reply.callbackFinish();
			} else
				reply.callbackNextOper();
				
		}
	};
	
	/**
	 * States connecting or disconnecting has time limit
	 */
	public Runnable ConnectingTime = new Runnable() {
		@Override
		public void run() {
		}
	};

	public void clearOperation() {
		operations.clear();
	}
	
	public void addOperation(BluetoothGattCharacteristic characteristic,
				BluetoothGattDescriptor descriptor, OPERATION operation) {
		operations.add(new ProcessIO(characteristic, descriptor, operation));
	}

	public void addOperation(ProcessIO process) {
		if (process != null)
			operations.add(process);
	}

	
	final UUID UUID_CLIENT_CHARACTERISTICS = UUID.fromString("00002902-0000-1000-8000-00805f9b34fb");	// Descriptor
	
    public void setNotification(BluetoothGattCharacteristic bluetoothGattCharacteristic) {
		gatt.setCharacteristicNotification(bluetoothGattCharacteristic, true);
		BluetoothGattDescriptor descriptor = bluetoothGattCharacteristic.getDescriptor(UUID_CLIENT_CHARACTERISTICS);
		descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);
		addOperation(bluetoothGattCharacteristic, descriptor, BtDevice.OPERATION.WRITE);
    }
	
    /**
     * 
     * @param process
     * @return
     */
    private boolean execOperation (ProcessIO process) {
    	if (process.operation == OPERATION.READ) {
    		if (process.descriptor != null) {
    			gatt.readDescriptor(process.descriptor);
    		} else {
    			gatt.readCharacteristic(process.characteristic);
    		}
    	} else if (process.operation == OPERATION.WRITE){
    		if (process.descriptor != null) {
    			gatt.writeDescriptor(process.descriptor);
    		} else {
    			gatt.writeCharacteristic(process.characteristic);
    		}
    	} else if (process.operation == OPERATION.SET_NOT) {
    		setNotification(process.characteristic);
    		return false;
    	}
    	return true;
    }
    
    /**
     * 
     * @return
     */
    public boolean execLastOperation() {
    	if (lastOperation == null)
    		return false;
    	if (lastOperation.characteristic == null)
    		Log.d("OPER", "Retrying " + lastOperation.toString() + " " + lastOperation.descriptor.getUuid().toString());
    	else
    		Log.d("OPER", "Retrying " + lastOperation.toString() + " " + lastOperation.characteristic.getUuid().toString());
    	execOperation(lastOperation);
    	//mHandler.postDelayed(ReadWriteTimeout, TIMEOUT_READWRITE);
		return true; 
    }
	
    /**
     * 
     * @return
     */
	public boolean execNextOperation(ReadWriteTimeoutCallback callback) {
		retries = 0;
		reply = callback;
		Log.d("OPER", "Next Operation");
		//mHandler.removeCallbacks(ReadWriteTimeout);
        if (!operations.isEmpty())
        {
	    	ProcessIO newProcess = operations.poll();
			if (!execOperation(newProcess))
			{
				execNextOperation(callback);
			}
	    	lastOperation = newProcess;
	    	//mHandler.postDelayed(ReadWriteTimeout, TIMEOUT_READWRITE);
	    	return true;
        }
        lastOperation = null;
        return false;
	}
	
	/**
	 * 
	 * @param state
	 */
	public BtDevice(int state, String address) {
		this.state = state;
		this.address = address;
	}
	
}
