package com.example.teste1;

import java.text.MessageFormat;
import java.util.List;

import android.annotation.TargetApi;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothGatt;
import android.bluetooth.BluetoothGattCharacteristic;
import android.bluetooth.BluetoothGattCallback;
import android.bluetooth.BluetoothGattService;
import android.bluetooth.BluetoothManager;
import android.bluetooth.BluetoothProfile;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.Message;
import android.renderscript.Sampler;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.GridLayout;
import android.widget.ListView;
import android.widget.TextView;


@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
public class mainDriver extends Activity implements Callback {
	
	private static final String MAIN_DRIVER = "MainDriver"; 
	private static final int SCAN_PERIOD = 10000;
	private static int REQUEST_ENABLE_BT = 1;
	private BluetoothAdapter mBluetoothAdapter = null;
	private Handler mHandler;
	TextView lstDevice;
	Button btnStart;
	ListView lstView;
	GridLayout grid;
	String msg;
	BluetoothGatt mBluetoothGatt;
	
	// First execution
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		grid = new GridLayout(this);
		grid.setColumnCount(1);
		
		lstView = new ListView(this);
		
		btnStart = new Button(this);
		btnStart.setText("Start Scan");
		btnStart.setOnClickListener(new OnClickListener() {
			
			public void onClick(View v) {
				scanLeDevice(true);
				
			}
		});
		
		
		lstDevice = new TextView(this);
		lstDevice.clearAnimation();
		
		grid.addView(lstDevice);
		grid.addView(btnStart);
		grid.addView(lstView);
		
		setContentView(grid);
		
		mHandler = new Handler(this);
		
		// Initializes Bluetooth adapter.
		final BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
		mBluetoothAdapter = bluetoothManager.getAdapter();
		// Ensures Bluetooth is available on the device and it is enabled. If not,
		// displays a dialog requesting user permission to enable Bluetooth.
		Log.d(MAIN_DRIVER, "Created");
		
		Log.d(MAIN_DRIVER, "BtAdapter Located");
		

		if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) {
		    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
		    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
		    getRegisteredDevices();
		}
		else {
			Log.d(MAIN_DRIVER, "BtAdapter Enabled");
		}
		
	}

	// Became visible
	protected void onStart() {
		super.onStart();
		if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) {
		    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
		    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
		    getRegisteredDevices();
		}
		else {
			scanLeDevice(true);
		}
	}

	protected void onPause() {
        super.onPause();
    }

	public void scanLeDevice(final boolean enable) {
		if (enable) {
            // Stops scanning after a pre-defined scan period.
            mHandler.postDelayed(new Runnable() {
				@Override
                public void run() {
                    mBluetoothAdapter.stopLeScan(mLeScanCallback);
                }
            }, SCAN_PERIOD);
            Log.d(MAIN_DRIVER, "ScanEnabled\n");
            mBluetoothAdapter.startLeScan(mLeScanCallback);
        } else {

            mBluetoothAdapter.stopLeScan(mLeScanCallback);
        }
        
    }
	
	private BluetoothAdapter.LeScanCallback mLeScanCallback = 
			new BluetoothAdapter.LeScanCallback() {
				
				@Override
				public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {
					Log.d(MAIN_DRIVER, "Found Device "+ device.getName());
					msg = device.getName() + device.getAddress();
					connect(device);
					runOnUiThread(new Runnable() {
						@Override
						public void run() {
							lstDevice.append( msg + "; ");
						}
					});
				}
			};

	@Override
	public boolean handleMessage(Message msg) {
		Log.d(MAIN_DRIVER, msg.getData().getString("name"));
		
		return false;
	}
	
	private void getRegisteredDevices() {
		Log.d(MAIN_DRIVER, "Showing Registered Devices");
		for (BluetoothDevice device : mBluetoothAdapter.getBondedDevices()) {
			lstDevice.append(device.getName() + device.getAddress() + 
					device.getBluetoothClass().toString() + String.valueOf(device.getType()) + device.getUuids().toString());
		} ;
	}
	
	/*
    public final static String ACTION_GATT_CONNECTED =
            "com.example.bluetooth.le.ACTION_GATT_CONNECTED";
    public final static String ACTION_GATT_DISCONNECTED =
            "com.example.bluetooth.le.ACTION_GATT_DISCONNECTED";
    public final static String ACTION_GATT_SERVICES_DISCOVERED =
            "com.example.bluetooth.le.ACTION_GATT_SERVICES_DISCOVERED";
    public final static String ACTION_DATA_AVAILABLE =
            "com.example.bluetooth.le.ACTION_DATA_AVAILABLE";
    public final static String EXTRA_DATA =
            "com.example.bluetooth.le.EXTRA_DATA";

    private int mConnectionState = STATE_DISCONNECTED;

    private static final int STATE_DISCONNECTED = 0;
    private static final int STATE_CONNECTING = 1;
    private static final int STATE_CONNECTED = 2;
	*/
	
	public void connect(BluetoothDevice device) {
		final BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {
			@Override
	        public void onConnectionStateChange(BluetoothGatt gatt, int status,
	                int newState) {
				Log.d(MAIN_DRIVER, "StateChanged " + String.valueOf(status) + " " + String.valueOf(newState));
	            /*
				String intentAction;
	            if (newState == BluetoothProfile.STATE_CONNECTED) {
	                intentAction = ACTION_GATT_CONNECTED;
	                mConnectionState = STATE_CONNECTED;
	                broadcastUpdate(intentAction);
	                Log.i(MAIN_DRIVER, "Connected to GATT server.");
	                Log.i(MAIN_DRIVER, "Attempting to start service discovery:" +
	                        mBluetoothGatt.discoverServices());

	            } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {
	                intentAction = ACTION_GATT_DISCONNECTED;
	                mConnectionState = STATE_DISCONNECTED;
	                Log.i(MAIN_DRIVER, "Disconnected from GATT server.");
	                broadcastUpdate(intentAction);
	            }
	            */
	        }

	        @Override
	        // New services discovered
	        public void onServicesDiscovered(BluetoothGatt gatt, int status) {
	        	
	        	
	            if (status == BluetoothGatt.GATT_SUCCESS) {
	            	Log.d(MAIN_DRIVER, "Discovered " + status);
	                //broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);
	            } else {
	                Log.w(MAIN_DRIVER, "onServicesDiscovered received: " + status);
	            }
	            
	        }

	        @Override
	        // Result of a characteristic read operation
	        public void onCharacteristicRead(BluetoothGatt gatt,
	                BluetoothGattCharacteristic characteristic,
	                int status) {
	            if (status == BluetoothGatt.GATT_SUCCESS) {
	            	Log.d(MAIN_DRIVER, "ReadCharacteristic: " + characteristic.toString() +"="+ String.valueOf(status));
	            }
	        }
	        
		};
		mBluetoothGatt = device.connectGatt(this, true, mGattCallback);
		mBluetoothGatt.discoverServices();
		mBluetoothGatt.readCharacteristic(SampleGattAtributes)
		for (BluetoothGattService bluetoothGattService : mBluetoothGatt.getServices()) {
			Log.d(MAIN_DRIVER, bluetoothGattService.toString());
		};
		
	}
	


}
